// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package DexSpan

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// DexSpanSwapParams is an auto generated low-level Go binding around an user-defined struct.
type DexSpanSwapParams struct {
	Tokens    []common.Address
	Amount    *big.Int
	MinReturn *big.Int
	Flags     []*big.Int
	DataTx    [][]byte
	IsWrapper bool
	Recipient common.Address
	DestToken []byte
}

// DexSpanMetaData contains all meta data concerning the DexSpan contract.
var DexSpanMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetForwarderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_native\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wrappedNative\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_univ2SkimAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyFactorySetter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExcecutionFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InavlidCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InavlidPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RestrictNativeToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongDataLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongTokenSent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroFlag\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ClaimOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetBridge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"SetAssetBridge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetForwarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"SetAssetForwarder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factorySetter\",\"type\":\"address\"}],\"name\":\"SetFactorySetter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factoryAddress\",\"type\":\"address\"}],\"name\":\"SetFlagToFactory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wrappedNative\",\"type\":\"address\"}],\"name\":\"SetWNativeAddresses\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"funcName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"contractIERC20Upgradeable[]\",\"name\":\"tokenPath\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"flags\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"widgetID\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contractIERC20Upgradeable\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contractIERC20Upgradeable\",\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"}],\"name\":\"SwapOnSameChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"funcName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"contractIERC20Upgradeable[]\",\"name\":\"tokenPath\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"flags\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"widgetID\",\"type\":\"uint256\"}],\"name\":\"SwapWithRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FACTORY_SETTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetBridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetForwarder\",\"outputs\":[{\"internalType\":\"contractIAssetForwarder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"flagToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenSent\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"handleMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeAddress\",\"outputs\":[{\"internalType\":\"contractIERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetBridge\",\"type\":\"address\"}],\"name\":\"setAssetBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"}],\"name\":\"setAssetForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factorySetter\",\"type\":\"address\"}],\"name\":\"setFactorySetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_flagCode\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_factoryAddress\",\"type\":\"address\"}],\"name\":\"setFlagToFactoryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_native\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wrappedNative\",\"type\":\"address\"}],\"name\":\"setWNativeAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"partnerId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"destChainIdBytes\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"recipient\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"depositType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"contractIERC20Upgradeable[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"flags\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataTx\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"isWrapper\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"destToken\",\"type\":\"bytes\"}],\"internalType\":\"structDexSpan.SwapParams\",\"name\":\"swapData\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"refundRecipient\",\"type\":\"address\"}],\"name\":\"swapAndDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20Upgradeable[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"flags\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataTx\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"isWrapper\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"widgetID\",\"type\":\"uint256\"}],\"name\":\"swapInSameChain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20Upgradeable[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"flags\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataTx\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"isWrapper\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"swapMultiWithRecipient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"univ2SkimAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wnativeAddress\",\"outputs\":[{\"internalType\":\"contractIWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "",
}

// DexSpanABI is the input ABI used to generate the binding from.
// Deprecated: Use DexSpanMetaData.ABI instead.
var DexSpanABI = DexSpanMetaData.ABI

// DexSpanBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DexSpanMetaData.Bin instead.
var DexSpanBin = DexSpanMetaData.Bin

// DeployDexSpan deploys a new Ethereum contract, binding an instance of DexSpan to it.
func DeployDexSpan(auth *bind.TransactOpts, backend bind.ContractBackend, _assetForwarderAddress common.Address, _native common.Address, _wrappedNative common.Address, _univ2SkimAddress common.Address) (common.Address, *types.Transaction, *DexSpan, error) {
	parsed, err := DexSpanMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DexSpanBin), backend, _assetForwarderAddress, _native, _wrappedNative, _univ2SkimAddress)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DexSpan{DexSpanCaller: DexSpanCaller{contract: contract}, DexSpanTransactor: DexSpanTransactor{contract: contract}, DexSpanFilterer: DexSpanFilterer{contract: contract}}, nil
}

// DexSpan is an auto generated Go binding around an Ethereum contract.
type DexSpan struct {
	DexSpanCaller     // Read-only binding to the contract
	DexSpanTransactor // Write-only binding to the contract
	DexSpanFilterer   // Log filterer for contract events
}

// DexSpanCaller is an auto generated read-only Go binding around an Ethereum contract.
type DexSpanCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DexSpanTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DexSpanTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DexSpanFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DexSpanFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DexSpanSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DexSpanSession struct {
	Contract     *DexSpan          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DexSpanCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DexSpanCallerSession struct {
	Contract *DexSpanCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// DexSpanTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DexSpanTransactorSession struct {
	Contract     *DexSpanTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// DexSpanRaw is an auto generated low-level Go binding around an Ethereum contract.
type DexSpanRaw struct {
	Contract *DexSpan // Generic contract binding to access the raw methods on
}

// DexSpanCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DexSpanCallerRaw struct {
	Contract *DexSpanCaller // Generic read-only contract binding to access the raw methods on
}

// DexSpanTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DexSpanTransactorRaw struct {
	Contract *DexSpanTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDexSpan creates a new instance of DexSpan, bound to a specific deployed contract.
func NewDexSpan(address common.Address, backend bind.ContractBackend) (*DexSpan, error) {
	contract, err := bindDexSpan(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DexSpan{DexSpanCaller: DexSpanCaller{contract: contract}, DexSpanTransactor: DexSpanTransactor{contract: contract}, DexSpanFilterer: DexSpanFilterer{contract: contract}}, nil
}

// NewDexSpanCaller creates a new read-only instance of DexSpan, bound to a specific deployed contract.
func NewDexSpanCaller(address common.Address, caller bind.ContractCaller) (*DexSpanCaller, error) {
	contract, err := bindDexSpan(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DexSpanCaller{contract: contract}, nil
}

// NewDexSpanTransactor creates a new write-only instance of DexSpan, bound to a specific deployed contract.
func NewDexSpanTransactor(address common.Address, transactor bind.ContractTransactor) (*DexSpanTransactor, error) {
	contract, err := bindDexSpan(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DexSpanTransactor{contract: contract}, nil
}

// NewDexSpanFilterer creates a new log filterer instance of DexSpan, bound to a specific deployed contract.
func NewDexSpanFilterer(address common.Address, filterer bind.ContractFilterer) (*DexSpanFilterer, error) {
	contract, err := bindDexSpan(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DexSpanFilterer{contract: contract}, nil
}

// bindDexSpan binds a generic wrapper to an already deployed contract.
func bindDexSpan(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := DexSpanMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DexSpan *DexSpanRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DexSpan.Contract.DexSpanCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DexSpan *DexSpanRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DexSpan.Contract.DexSpanTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DexSpan *DexSpanRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DexSpan.Contract.DexSpanTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DexSpan *DexSpanCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DexSpan.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DexSpan *DexSpanTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DexSpan.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DexSpan *DexSpanTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DexSpan.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_DexSpan *DexSpanCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _DexSpan.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_DexSpan *DexSpanSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _DexSpan.Contract.DEFAULTADMINROLE(&_DexSpan.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_DexSpan *DexSpanCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _DexSpan.Contract.DEFAULTADMINROLE(&_DexSpan.CallOpts)
}

// FACTORYSETTERROLE is a free data retrieval call binding the contract method 0x086efdc4.
//
// Solidity: function FACTORY_SETTER_ROLE() view returns(bytes32)
func (_DexSpan *DexSpanCaller) FACTORYSETTERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _DexSpan.contract.Call(opts, &out, "FACTORY_SETTER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// FACTORYSETTERROLE is a free data retrieval call binding the contract method 0x086efdc4.
//
// Solidity: function FACTORY_SETTER_ROLE() view returns(bytes32)
func (_DexSpan *DexSpanSession) FACTORYSETTERROLE() ([32]byte, error) {
	return _DexSpan.Contract.FACTORYSETTERROLE(&_DexSpan.CallOpts)
}

// FACTORYSETTERROLE is a free data retrieval call binding the contract method 0x086efdc4.
//
// Solidity: function FACTORY_SETTER_ROLE() view returns(bytes32)
func (_DexSpan *DexSpanCallerSession) FACTORYSETTERROLE() ([32]byte, error) {
	return _DexSpan.Contract.FACTORYSETTERROLE(&_DexSpan.CallOpts)
}

// AssetBridge is a free data retrieval call binding the contract method 0x285f94a0.
//
// Solidity: function assetBridge() view returns(address)
func (_DexSpan *DexSpanCaller) AssetBridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DexSpan.contract.Call(opts, &out, "assetBridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AssetBridge is a free data retrieval call binding the contract method 0x285f94a0.
//
// Solidity: function assetBridge() view returns(address)
func (_DexSpan *DexSpanSession) AssetBridge() (common.Address, error) {
	return _DexSpan.Contract.AssetBridge(&_DexSpan.CallOpts)
}

// AssetBridge is a free data retrieval call binding the contract method 0x285f94a0.
//
// Solidity: function assetBridge() view returns(address)
func (_DexSpan *DexSpanCallerSession) AssetBridge() (common.Address, error) {
	return _DexSpan.Contract.AssetBridge(&_DexSpan.CallOpts)
}

// AssetForwarder is a free data retrieval call binding the contract method 0x7fe68917.
//
// Solidity: function assetForwarder() view returns(address)
func (_DexSpan *DexSpanCaller) AssetForwarder(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DexSpan.contract.Call(opts, &out, "assetForwarder")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AssetForwarder is a free data retrieval call binding the contract method 0x7fe68917.
//
// Solidity: function assetForwarder() view returns(address)
func (_DexSpan *DexSpanSession) AssetForwarder() (common.Address, error) {
	return _DexSpan.Contract.AssetForwarder(&_DexSpan.CallOpts)
}

// AssetForwarder is a free data retrieval call binding the contract method 0x7fe68917.
//
// Solidity: function assetForwarder() view returns(address)
func (_DexSpan *DexSpanCallerSession) AssetForwarder() (common.Address, error) {
	return _DexSpan.Contract.AssetForwarder(&_DexSpan.CallOpts)
}

// FlagToAddress is a free data retrieval call binding the contract method 0xc75a57e4.
//
// Solidity: function flagToAddress(uint256 ) view returns(address)
func (_DexSpan *DexSpanCaller) FlagToAddress(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _DexSpan.contract.Call(opts, &out, "flagToAddress", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FlagToAddress is a free data retrieval call binding the contract method 0xc75a57e4.
//
// Solidity: function flagToAddress(uint256 ) view returns(address)
func (_DexSpan *DexSpanSession) FlagToAddress(arg0 *big.Int) (common.Address, error) {
	return _DexSpan.Contract.FlagToAddress(&_DexSpan.CallOpts, arg0)
}

// FlagToAddress is a free data retrieval call binding the contract method 0xc75a57e4.
//
// Solidity: function flagToAddress(uint256 ) view returns(address)
func (_DexSpan *DexSpanCallerSession) FlagToAddress(arg0 *big.Int) (common.Address, error) {
	return _DexSpan.Contract.FlagToAddress(&_DexSpan.CallOpts, arg0)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_DexSpan *DexSpanCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _DexSpan.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_DexSpan *DexSpanSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _DexSpan.Contract.GetRoleAdmin(&_DexSpan.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_DexSpan *DexSpanCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _DexSpan.Contract.GetRoleAdmin(&_DexSpan.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_DexSpan *DexSpanCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _DexSpan.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_DexSpan *DexSpanSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _DexSpan.Contract.HasRole(&_DexSpan.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_DexSpan *DexSpanCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _DexSpan.Contract.HasRole(&_DexSpan.CallOpts, role, account)
}

// NativeAddress is a free data retrieval call binding the contract method 0x2e476337.
//
// Solidity: function nativeAddress() view returns(address)
func (_DexSpan *DexSpanCaller) NativeAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DexSpan.contract.Call(opts, &out, "nativeAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// NativeAddress is a free data retrieval call binding the contract method 0x2e476337.
//
// Solidity: function nativeAddress() view returns(address)
func (_DexSpan *DexSpanSession) NativeAddress() (common.Address, error) {
	return _DexSpan.Contract.NativeAddress(&_DexSpan.CallOpts)
}

// NativeAddress is a free data retrieval call binding the contract method 0x2e476337.
//
// Solidity: function nativeAddress() view returns(address)
func (_DexSpan *DexSpanCallerSession) NativeAddress() (common.Address, error) {
	return _DexSpan.Contract.NativeAddress(&_DexSpan.CallOpts)
}

// NewOwner is a free data retrieval call binding the contract method 0xd4ee1d90.
//
// Solidity: function newOwner() view returns(address)
func (_DexSpan *DexSpanCaller) NewOwner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DexSpan.contract.Call(opts, &out, "newOwner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// NewOwner is a free data retrieval call binding the contract method 0xd4ee1d90.
//
// Solidity: function newOwner() view returns(address)
func (_DexSpan *DexSpanSession) NewOwner() (common.Address, error) {
	return _DexSpan.Contract.NewOwner(&_DexSpan.CallOpts)
}

// NewOwner is a free data retrieval call binding the contract method 0xd4ee1d90.
//
// Solidity: function newOwner() view returns(address)
func (_DexSpan *DexSpanCallerSession) NewOwner() (common.Address, error) {
	return _DexSpan.Contract.NewOwner(&_DexSpan.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_DexSpan *DexSpanCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _DexSpan.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_DexSpan *DexSpanSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _DexSpan.Contract.SupportsInterface(&_DexSpan.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_DexSpan *DexSpanCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _DexSpan.Contract.SupportsInterface(&_DexSpan.CallOpts, interfaceId)
}

// Univ2SkimAddress is a free data retrieval call binding the contract method 0xa2625efc.
//
// Solidity: function univ2SkimAddress() view returns(address)
func (_DexSpan *DexSpanCaller) Univ2SkimAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DexSpan.contract.Call(opts, &out, "univ2SkimAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Univ2SkimAddress is a free data retrieval call binding the contract method 0xa2625efc.
//
// Solidity: function univ2SkimAddress() view returns(address)
func (_DexSpan *DexSpanSession) Univ2SkimAddress() (common.Address, error) {
	return _DexSpan.Contract.Univ2SkimAddress(&_DexSpan.CallOpts)
}

// Univ2SkimAddress is a free data retrieval call binding the contract method 0xa2625efc.
//
// Solidity: function univ2SkimAddress() view returns(address)
func (_DexSpan *DexSpanCallerSession) Univ2SkimAddress() (common.Address, error) {
	return _DexSpan.Contract.Univ2SkimAddress(&_DexSpan.CallOpts)
}

// WnativeAddress is a free data retrieval call binding the contract method 0xe2a4ac2d.
//
// Solidity: function wnativeAddress() view returns(address)
func (_DexSpan *DexSpanCaller) WnativeAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DexSpan.contract.Call(opts, &out, "wnativeAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// WnativeAddress is a free data retrieval call binding the contract method 0xe2a4ac2d.
//
// Solidity: function wnativeAddress() view returns(address)
func (_DexSpan *DexSpanSession) WnativeAddress() (common.Address, error) {
	return _DexSpan.Contract.WnativeAddress(&_DexSpan.CallOpts)
}

// WnativeAddress is a free data retrieval call binding the contract method 0xe2a4ac2d.
//
// Solidity: function wnativeAddress() view returns(address)
func (_DexSpan *DexSpanCallerSession) WnativeAddress() (common.Address, error) {
	return _DexSpan.Contract.WnativeAddress(&_DexSpan.CallOpts)
}

// ClaimOwnership is a paid mutator transaction binding the contract method 0x4e71e0c8.
//
// Solidity: function claimOwnership() returns()
func (_DexSpan *DexSpanTransactor) ClaimOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DexSpan.contract.Transact(opts, "claimOwnership")
}

// ClaimOwnership is a paid mutator transaction binding the contract method 0x4e71e0c8.
//
// Solidity: function claimOwnership() returns()
func (_DexSpan *DexSpanSession) ClaimOwnership() (*types.Transaction, error) {
	return _DexSpan.Contract.ClaimOwnership(&_DexSpan.TransactOpts)
}

// ClaimOwnership is a paid mutator transaction binding the contract method 0x4e71e0c8.
//
// Solidity: function claimOwnership() returns()
func (_DexSpan *DexSpanTransactorSession) ClaimOwnership() (*types.Transaction, error) {
	return _DexSpan.Contract.ClaimOwnership(&_DexSpan.TransactOpts)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_DexSpan *DexSpanTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _DexSpan.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_DexSpan *DexSpanSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _DexSpan.Contract.GrantRole(&_DexSpan.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_DexSpan *DexSpanTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _DexSpan.Contract.GrantRole(&_DexSpan.TransactOpts, role, account)
}

// HandleMessage is a paid mutator transaction binding the contract method 0xd00a2d5f.
//
// Solidity: function handleMessage(address _tokenSent, uint256 _amount, bytes message) returns()
func (_DexSpan *DexSpanTransactor) HandleMessage(opts *bind.TransactOpts, _tokenSent common.Address, _amount *big.Int, message []byte) (*types.Transaction, error) {
	return _DexSpan.contract.Transact(opts, "handleMessage", _tokenSent, _amount, message)
}

// HandleMessage is a paid mutator transaction binding the contract method 0xd00a2d5f.
//
// Solidity: function handleMessage(address _tokenSent, uint256 _amount, bytes message) returns()
func (_DexSpan *DexSpanSession) HandleMessage(_tokenSent common.Address, _amount *big.Int, message []byte) (*types.Transaction, error) {
	return _DexSpan.Contract.HandleMessage(&_DexSpan.TransactOpts, _tokenSent, _amount, message)
}

// HandleMessage is a paid mutator transaction binding the contract method 0xd00a2d5f.
//
// Solidity: function handleMessage(address _tokenSent, uint256 _amount, bytes message) returns()
func (_DexSpan *DexSpanTransactorSession) HandleMessage(_tokenSent common.Address, _amount *big.Int, message []byte) (*types.Transaction, error) {
	return _DexSpan.Contract.HandleMessage(&_DexSpan.TransactOpts, _tokenSent, _amount, message)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_DexSpan *DexSpanTransactor) Multicall(opts *bind.TransactOpts, data [][]byte) (*types.Transaction, error) {
	return _DexSpan.contract.Transact(opts, "multicall", data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_DexSpan *DexSpanSession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _DexSpan.Contract.Multicall(&_DexSpan.TransactOpts, data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_DexSpan *DexSpanTransactorSession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _DexSpan.Contract.Multicall(&_DexSpan.TransactOpts, data)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_DexSpan *DexSpanTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _DexSpan.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_DexSpan *DexSpanSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _DexSpan.Contract.RenounceRole(&_DexSpan.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_DexSpan *DexSpanTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _DexSpan.Contract.RenounceRole(&_DexSpan.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_DexSpan *DexSpanTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _DexSpan.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_DexSpan *DexSpanSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _DexSpan.Contract.RevokeRole(&_DexSpan.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_DexSpan *DexSpanTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _DexSpan.Contract.RevokeRole(&_DexSpan.TransactOpts, role, account)
}

// SetAssetBridge is a paid mutator transaction binding the contract method 0x9e99ec39.
//
// Solidity: function setAssetBridge(address _assetBridge) returns()
func (_DexSpan *DexSpanTransactor) SetAssetBridge(opts *bind.TransactOpts, _assetBridge common.Address) (*types.Transaction, error) {
	return _DexSpan.contract.Transact(opts, "setAssetBridge", _assetBridge)
}

// SetAssetBridge is a paid mutator transaction binding the contract method 0x9e99ec39.
//
// Solidity: function setAssetBridge(address _assetBridge) returns()
func (_DexSpan *DexSpanSession) SetAssetBridge(_assetBridge common.Address) (*types.Transaction, error) {
	return _DexSpan.Contract.SetAssetBridge(&_DexSpan.TransactOpts, _assetBridge)
}

// SetAssetBridge is a paid mutator transaction binding the contract method 0x9e99ec39.
//
// Solidity: function setAssetBridge(address _assetBridge) returns()
func (_DexSpan *DexSpanTransactorSession) SetAssetBridge(_assetBridge common.Address) (*types.Transaction, error) {
	return _DexSpan.Contract.SetAssetBridge(&_DexSpan.TransactOpts, _assetBridge)
}

// SetAssetForwarder is a paid mutator transaction binding the contract method 0x18137a41.
//
// Solidity: function setAssetForwarder(address _forwarder) returns()
func (_DexSpan *DexSpanTransactor) SetAssetForwarder(opts *bind.TransactOpts, _forwarder common.Address) (*types.Transaction, error) {
	return _DexSpan.contract.Transact(opts, "setAssetForwarder", _forwarder)
}

// SetAssetForwarder is a paid mutator transaction binding the contract method 0x18137a41.
//
// Solidity: function setAssetForwarder(address _forwarder) returns()
func (_DexSpan *DexSpanSession) SetAssetForwarder(_forwarder common.Address) (*types.Transaction, error) {
	return _DexSpan.Contract.SetAssetForwarder(&_DexSpan.TransactOpts, _forwarder)
}

// SetAssetForwarder is a paid mutator transaction binding the contract method 0x18137a41.
//
// Solidity: function setAssetForwarder(address _forwarder) returns()
func (_DexSpan *DexSpanTransactorSession) SetAssetForwarder(_forwarder common.Address) (*types.Transaction, error) {
	return _DexSpan.Contract.SetAssetForwarder(&_DexSpan.TransactOpts, _forwarder)
}

// SetFactorySetter is a paid mutator transaction binding the contract method 0xadb88982.
//
// Solidity: function setFactorySetter(address _factorySetter) returns()
func (_DexSpan *DexSpanTransactor) SetFactorySetter(opts *bind.TransactOpts, _factorySetter common.Address) (*types.Transaction, error) {
	return _DexSpan.contract.Transact(opts, "setFactorySetter", _factorySetter)
}

// SetFactorySetter is a paid mutator transaction binding the contract method 0xadb88982.
//
// Solidity: function setFactorySetter(address _factorySetter) returns()
func (_DexSpan *DexSpanSession) SetFactorySetter(_factorySetter common.Address) (*types.Transaction, error) {
	return _DexSpan.Contract.SetFactorySetter(&_DexSpan.TransactOpts, _factorySetter)
}

// SetFactorySetter is a paid mutator transaction binding the contract method 0xadb88982.
//
// Solidity: function setFactorySetter(address _factorySetter) returns()
func (_DexSpan *DexSpanTransactorSession) SetFactorySetter(_factorySetter common.Address) (*types.Transaction, error) {
	return _DexSpan.Contract.SetFactorySetter(&_DexSpan.TransactOpts, _factorySetter)
}

// SetFlagToFactoryAddress is a paid mutator transaction binding the contract method 0x16965160.
//
// Solidity: function setFlagToFactoryAddress(uint256 _flagCode, address _factoryAddress) returns()
func (_DexSpan *DexSpanTransactor) SetFlagToFactoryAddress(opts *bind.TransactOpts, _flagCode *big.Int, _factoryAddress common.Address) (*types.Transaction, error) {
	return _DexSpan.contract.Transact(opts, "setFlagToFactoryAddress", _flagCode, _factoryAddress)
}

// SetFlagToFactoryAddress is a paid mutator transaction binding the contract method 0x16965160.
//
// Solidity: function setFlagToFactoryAddress(uint256 _flagCode, address _factoryAddress) returns()
func (_DexSpan *DexSpanSession) SetFlagToFactoryAddress(_flagCode *big.Int, _factoryAddress common.Address) (*types.Transaction, error) {
	return _DexSpan.Contract.SetFlagToFactoryAddress(&_DexSpan.TransactOpts, _flagCode, _factoryAddress)
}

// SetFlagToFactoryAddress is a paid mutator transaction binding the contract method 0x16965160.
//
// Solidity: function setFlagToFactoryAddress(uint256 _flagCode, address _factoryAddress) returns()
func (_DexSpan *DexSpanTransactorSession) SetFlagToFactoryAddress(_flagCode *big.Int, _factoryAddress common.Address) (*types.Transaction, error) {
	return _DexSpan.Contract.SetFlagToFactoryAddress(&_DexSpan.TransactOpts, _flagCode, _factoryAddress)
}

// SetWNativeAddresses is a paid mutator transaction binding the contract method 0xda6689f0.
//
// Solidity: function setWNativeAddresses(address _native, address _wrappedNative) returns()
func (_DexSpan *DexSpanTransactor) SetWNativeAddresses(opts *bind.TransactOpts, _native common.Address, _wrappedNative common.Address) (*types.Transaction, error) {
	return _DexSpan.contract.Transact(opts, "setWNativeAddresses", _native, _wrappedNative)
}

// SetWNativeAddresses is a paid mutator transaction binding the contract method 0xda6689f0.
//
// Solidity: function setWNativeAddresses(address _native, address _wrappedNative) returns()
func (_DexSpan *DexSpanSession) SetWNativeAddresses(_native common.Address, _wrappedNative common.Address) (*types.Transaction, error) {
	return _DexSpan.Contract.SetWNativeAddresses(&_DexSpan.TransactOpts, _native, _wrappedNative)
}

// SetWNativeAddresses is a paid mutator transaction binding the contract method 0xda6689f0.
//
// Solidity: function setWNativeAddresses(address _native, address _wrappedNative) returns()
func (_DexSpan *DexSpanTransactorSession) SetWNativeAddresses(_native common.Address, _wrappedNative common.Address) (*types.Transaction, error) {
	return _DexSpan.Contract.SetWNativeAddresses(&_DexSpan.TransactOpts, _native, _wrappedNative)
}

// SwapAndDeposit is a paid mutator transaction binding the contract method 0x06135b7c.
//
// Solidity: function swapAndDeposit(uint256 partnerId, bytes32 destChainIdBytes, bytes recipient, uint8 depositType, uint256 feeAmount, bytes message, (address[],uint256,uint256,uint256[],bytes[],bool,address,bytes) swapData, address refundRecipient) payable returns()
func (_DexSpan *DexSpanTransactor) SwapAndDeposit(opts *bind.TransactOpts, partnerId *big.Int, destChainIdBytes [32]byte, recipient []byte, depositType uint8, feeAmount *big.Int, message []byte, swapData DexSpanSwapParams, refundRecipient common.Address) (*types.Transaction, error) {
	return _DexSpan.contract.Transact(opts, "swapAndDeposit", partnerId, destChainIdBytes, recipient, depositType, feeAmount, message, swapData, refundRecipient)
}

// SwapAndDeposit is a paid mutator transaction binding the contract method 0x06135b7c.
//
// Solidity: function swapAndDeposit(uint256 partnerId, bytes32 destChainIdBytes, bytes recipient, uint8 depositType, uint256 feeAmount, bytes message, (address[],uint256,uint256,uint256[],bytes[],bool,address,bytes) swapData, address refundRecipient) payable returns()
func (_DexSpan *DexSpanSession) SwapAndDeposit(partnerId *big.Int, destChainIdBytes [32]byte, recipient []byte, depositType uint8, feeAmount *big.Int, message []byte, swapData DexSpanSwapParams, refundRecipient common.Address) (*types.Transaction, error) {
	return _DexSpan.Contract.SwapAndDeposit(&_DexSpan.TransactOpts, partnerId, destChainIdBytes, recipient, depositType, feeAmount, message, swapData, refundRecipient)
}

// SwapAndDeposit is a paid mutator transaction binding the contract method 0x06135b7c.
//
// Solidity: function swapAndDeposit(uint256 partnerId, bytes32 destChainIdBytes, bytes recipient, uint8 depositType, uint256 feeAmount, bytes message, (address[],uint256,uint256,uint256[],bytes[],bool,address,bytes) swapData, address refundRecipient) payable returns()
func (_DexSpan *DexSpanTransactorSession) SwapAndDeposit(partnerId *big.Int, destChainIdBytes [32]byte, recipient []byte, depositType uint8, feeAmount *big.Int, message []byte, swapData DexSpanSwapParams, refundRecipient common.Address) (*types.Transaction, error) {
	return _DexSpan.Contract.SwapAndDeposit(&_DexSpan.TransactOpts, partnerId, destChainIdBytes, recipient, depositType, feeAmount, message, swapData, refundRecipient)
}

// SwapInSameChain is a paid mutator transaction binding the contract method 0x183d9c95.
//
// Solidity: function swapInSameChain(address[] tokens, uint256 amount, uint256 minReturn, uint256[] flags, bytes[] dataTx, bool isWrapper, address recipient, uint256 widgetID) payable returns(uint256 returnAmount)
func (_DexSpan *DexSpanTransactor) SwapInSameChain(opts *bind.TransactOpts, tokens []common.Address, amount *big.Int, minReturn *big.Int, flags []*big.Int, dataTx [][]byte, isWrapper bool, recipient common.Address, widgetID *big.Int) (*types.Transaction, error) {
	return _DexSpan.contract.Transact(opts, "swapInSameChain", tokens, amount, minReturn, flags, dataTx, isWrapper, recipient, widgetID)
}

// SwapInSameChain is a paid mutator transaction binding the contract method 0x183d9c95.
//
// Solidity: function swapInSameChain(address[] tokens, uint256 amount, uint256 minReturn, uint256[] flags, bytes[] dataTx, bool isWrapper, address recipient, uint256 widgetID) payable returns(uint256 returnAmount)
func (_DexSpan *DexSpanSession) SwapInSameChain(tokens []common.Address, amount *big.Int, minReturn *big.Int, flags []*big.Int, dataTx [][]byte, isWrapper bool, recipient common.Address, widgetID *big.Int) (*types.Transaction, error) {
	return _DexSpan.Contract.SwapInSameChain(&_DexSpan.TransactOpts, tokens, amount, minReturn, flags, dataTx, isWrapper, recipient, widgetID)
}

// SwapInSameChain is a paid mutator transaction binding the contract method 0x183d9c95.
//
// Solidity: function swapInSameChain(address[] tokens, uint256 amount, uint256 minReturn, uint256[] flags, bytes[] dataTx, bool isWrapper, address recipient, uint256 widgetID) payable returns(uint256 returnAmount)
func (_DexSpan *DexSpanTransactorSession) SwapInSameChain(tokens []common.Address, amount *big.Int, minReturn *big.Int, flags []*big.Int, dataTx [][]byte, isWrapper bool, recipient common.Address, widgetID *big.Int) (*types.Transaction, error) {
	return _DexSpan.Contract.SwapInSameChain(&_DexSpan.TransactOpts, tokens, amount, minReturn, flags, dataTx, isWrapper, recipient, widgetID)
}

// SwapMultiWithRecipient is a paid mutator transaction binding the contract method 0xe738aa8d.
//
// Solidity: function swapMultiWithRecipient(address[] tokens, uint256 amount, uint256 minReturn, uint256[] flags, bytes[] dataTx, bool isWrapper, address recipient) payable returns(uint256 returnAmount)
func (_DexSpan *DexSpanTransactor) SwapMultiWithRecipient(opts *bind.TransactOpts, tokens []common.Address, amount *big.Int, minReturn *big.Int, flags []*big.Int, dataTx [][]byte, isWrapper bool, recipient common.Address) (*types.Transaction, error) {
	return _DexSpan.contract.Transact(opts, "swapMultiWithRecipient", tokens, amount, minReturn, flags, dataTx, isWrapper, recipient)
}

// SwapMultiWithRecipient is a paid mutator transaction binding the contract method 0xe738aa8d.
//
// Solidity: function swapMultiWithRecipient(address[] tokens, uint256 amount, uint256 minReturn, uint256[] flags, bytes[] dataTx, bool isWrapper, address recipient) payable returns(uint256 returnAmount)
func (_DexSpan *DexSpanSession) SwapMultiWithRecipient(tokens []common.Address, amount *big.Int, minReturn *big.Int, flags []*big.Int, dataTx [][]byte, isWrapper bool, recipient common.Address) (*types.Transaction, error) {
	return _DexSpan.Contract.SwapMultiWithRecipient(&_DexSpan.TransactOpts, tokens, amount, minReturn, flags, dataTx, isWrapper, recipient)
}

// SwapMultiWithRecipient is a paid mutator transaction binding the contract method 0xe738aa8d.
//
// Solidity: function swapMultiWithRecipient(address[] tokens, uint256 amount, uint256 minReturn, uint256[] flags, bytes[] dataTx, bool isWrapper, address recipient) payable returns(uint256 returnAmount)
func (_DexSpan *DexSpanTransactorSession) SwapMultiWithRecipient(tokens []common.Address, amount *big.Int, minReturn *big.Int, flags []*big.Int, dataTx [][]byte, isWrapper bool, recipient common.Address) (*types.Transaction, error) {
	return _DexSpan.Contract.SwapMultiWithRecipient(&_DexSpan.TransactOpts, tokens, amount, minReturn, flags, dataTx, isWrapper, recipient)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address _newOwner) returns()
func (_DexSpan *DexSpanTransactor) TransferOwnership(opts *bind.TransactOpts, _newOwner common.Address) (*types.Transaction, error) {
	return _DexSpan.contract.Transact(opts, "transferOwnership", _newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address _newOwner) returns()
func (_DexSpan *DexSpanSession) TransferOwnership(_newOwner common.Address) (*types.Transaction, error) {
	return _DexSpan.Contract.TransferOwnership(&_DexSpan.TransactOpts, _newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address _newOwner) returns()
func (_DexSpan *DexSpanTransactorSession) TransferOwnership(_newOwner common.Address) (*types.Transaction, error) {
	return _DexSpan.Contract.TransferOwnership(&_DexSpan.TransactOpts, _newOwner)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_DexSpan *DexSpanTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DexSpan.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_DexSpan *DexSpanSession) Receive() (*types.Transaction, error) {
	return _DexSpan.Contract.Receive(&_DexSpan.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_DexSpan *DexSpanTransactorSession) Receive() (*types.Transaction, error) {
	return _DexSpan.Contract.Receive(&_DexSpan.TransactOpts)
}

// DexSpanClaimOwnershipIterator is returned from FilterClaimOwnership and is used to iterate over the raw logs and unpacked data for ClaimOwnership events raised by the DexSpan contract.
type DexSpanClaimOwnershipIterator struct {
	Event *DexSpanClaimOwnership // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DexSpanClaimOwnershipIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DexSpanClaimOwnership)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DexSpanClaimOwnership)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DexSpanClaimOwnershipIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DexSpanClaimOwnershipIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DexSpanClaimOwnership represents a ClaimOwnership event raised by the DexSpan contract.
type DexSpanClaimOwnership struct {
	NewOwner common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterClaimOwnership is a free log retrieval operation binding the contract event 0x85a8c8100c1d48466310240af79644f50cdae7d09cb4820d60dfc5b2462f0fd0.
//
// Solidity: event ClaimOwnership(address newOwner)
func (_DexSpan *DexSpanFilterer) FilterClaimOwnership(opts *bind.FilterOpts) (*DexSpanClaimOwnershipIterator, error) {

	logs, sub, err := _DexSpan.contract.FilterLogs(opts, "ClaimOwnership")
	if err != nil {
		return nil, err
	}
	return &DexSpanClaimOwnershipIterator{contract: _DexSpan.contract, event: "ClaimOwnership", logs: logs, sub: sub}, nil
}

// WatchClaimOwnership is a free log subscription operation binding the contract event 0x85a8c8100c1d48466310240af79644f50cdae7d09cb4820d60dfc5b2462f0fd0.
//
// Solidity: event ClaimOwnership(address newOwner)
func (_DexSpan *DexSpanFilterer) WatchClaimOwnership(opts *bind.WatchOpts, sink chan<- *DexSpanClaimOwnership) (event.Subscription, error) {

	logs, sub, err := _DexSpan.contract.WatchLogs(opts, "ClaimOwnership")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DexSpanClaimOwnership)
				if err := _DexSpan.contract.UnpackLog(event, "ClaimOwnership", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClaimOwnership is a log parse operation binding the contract event 0x85a8c8100c1d48466310240af79644f50cdae7d09cb4820d60dfc5b2462f0fd0.
//
// Solidity: event ClaimOwnership(address newOwner)
func (_DexSpan *DexSpanFilterer) ParseClaimOwnership(log types.Log) (*DexSpanClaimOwnership, error) {
	event := new(DexSpanClaimOwnership)
	if err := _DexSpan.contract.UnpackLog(event, "ClaimOwnership", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DexSpanRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the DexSpan contract.
type DexSpanRoleAdminChangedIterator struct {
	Event *DexSpanRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DexSpanRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DexSpanRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DexSpanRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DexSpanRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DexSpanRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DexSpanRoleAdminChanged represents a RoleAdminChanged event raised by the DexSpan contract.
type DexSpanRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_DexSpan *DexSpanFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*DexSpanRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _DexSpan.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &DexSpanRoleAdminChangedIterator{contract: _DexSpan.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_DexSpan *DexSpanFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *DexSpanRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _DexSpan.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DexSpanRoleAdminChanged)
				if err := _DexSpan.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_DexSpan *DexSpanFilterer) ParseRoleAdminChanged(log types.Log) (*DexSpanRoleAdminChanged, error) {
	event := new(DexSpanRoleAdminChanged)
	if err := _DexSpan.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DexSpanRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the DexSpan contract.
type DexSpanRoleGrantedIterator struct {
	Event *DexSpanRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DexSpanRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DexSpanRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DexSpanRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DexSpanRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DexSpanRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DexSpanRoleGranted represents a RoleGranted event raised by the DexSpan contract.
type DexSpanRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_DexSpan *DexSpanFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*DexSpanRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _DexSpan.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &DexSpanRoleGrantedIterator{contract: _DexSpan.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_DexSpan *DexSpanFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *DexSpanRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _DexSpan.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DexSpanRoleGranted)
				if err := _DexSpan.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_DexSpan *DexSpanFilterer) ParseRoleGranted(log types.Log) (*DexSpanRoleGranted, error) {
	event := new(DexSpanRoleGranted)
	if err := _DexSpan.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DexSpanRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the DexSpan contract.
type DexSpanRoleRevokedIterator struct {
	Event *DexSpanRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DexSpanRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DexSpanRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DexSpanRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DexSpanRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DexSpanRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DexSpanRoleRevoked represents a RoleRevoked event raised by the DexSpan contract.
type DexSpanRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_DexSpan *DexSpanFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*DexSpanRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _DexSpan.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &DexSpanRoleRevokedIterator{contract: _DexSpan.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_DexSpan *DexSpanFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *DexSpanRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _DexSpan.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DexSpanRoleRevoked)
				if err := _DexSpan.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_DexSpan *DexSpanFilterer) ParseRoleRevoked(log types.Log) (*DexSpanRoleRevoked, error) {
	event := new(DexSpanRoleRevoked)
	if err := _DexSpan.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DexSpanSetAssetBridgeIterator is returned from FilterSetAssetBridge and is used to iterate over the raw logs and unpacked data for SetAssetBridge events raised by the DexSpan contract.
type DexSpanSetAssetBridgeIterator struct {
	Event *DexSpanSetAssetBridge // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DexSpanSetAssetBridgeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DexSpanSetAssetBridge)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DexSpanSetAssetBridge)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DexSpanSetAssetBridgeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DexSpanSetAssetBridgeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DexSpanSetAssetBridge represents a SetAssetBridge event raised by the DexSpan contract.
type DexSpanSetAssetBridge struct {
	AssetBridge common.Address
	Admin       common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSetAssetBridge is a free log retrieval operation binding the contract event 0x45085069ced50a4d2e82656a82ba8f5a1a28694489d8ea262252e40899a930a2.
//
// Solidity: event SetAssetBridge(address assetBridge, address admin)
func (_DexSpan *DexSpanFilterer) FilterSetAssetBridge(opts *bind.FilterOpts) (*DexSpanSetAssetBridgeIterator, error) {

	logs, sub, err := _DexSpan.contract.FilterLogs(opts, "SetAssetBridge")
	if err != nil {
		return nil, err
	}
	return &DexSpanSetAssetBridgeIterator{contract: _DexSpan.contract, event: "SetAssetBridge", logs: logs, sub: sub}, nil
}

// WatchSetAssetBridge is a free log subscription operation binding the contract event 0x45085069ced50a4d2e82656a82ba8f5a1a28694489d8ea262252e40899a930a2.
//
// Solidity: event SetAssetBridge(address assetBridge, address admin)
func (_DexSpan *DexSpanFilterer) WatchSetAssetBridge(opts *bind.WatchOpts, sink chan<- *DexSpanSetAssetBridge) (event.Subscription, error) {

	logs, sub, err := _DexSpan.contract.WatchLogs(opts, "SetAssetBridge")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DexSpanSetAssetBridge)
				if err := _DexSpan.contract.UnpackLog(event, "SetAssetBridge", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetAssetBridge is a log parse operation binding the contract event 0x45085069ced50a4d2e82656a82ba8f5a1a28694489d8ea262252e40899a930a2.
//
// Solidity: event SetAssetBridge(address assetBridge, address admin)
func (_DexSpan *DexSpanFilterer) ParseSetAssetBridge(log types.Log) (*DexSpanSetAssetBridge, error) {
	event := new(DexSpanSetAssetBridge)
	if err := _DexSpan.contract.UnpackLog(event, "SetAssetBridge", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DexSpanSetAssetForwarderIterator is returned from FilterSetAssetForwarder and is used to iterate over the raw logs and unpacked data for SetAssetForwarder events raised by the DexSpan contract.
type DexSpanSetAssetForwarderIterator struct {
	Event *DexSpanSetAssetForwarder // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DexSpanSetAssetForwarderIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DexSpanSetAssetForwarder)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DexSpanSetAssetForwarder)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DexSpanSetAssetForwarderIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DexSpanSetAssetForwarderIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DexSpanSetAssetForwarder represents a SetAssetForwarder event raised by the DexSpan contract.
type DexSpanSetAssetForwarder struct {
	AssetForwarder common.Address
	Admin          common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterSetAssetForwarder is a free log retrieval operation binding the contract event 0x61b6fe2922f0180b98d305419bf3dcf432f5d8df894388c61c1f599c2194ec1d.
//
// Solidity: event SetAssetForwarder(address assetForwarder, address admin)
func (_DexSpan *DexSpanFilterer) FilterSetAssetForwarder(opts *bind.FilterOpts) (*DexSpanSetAssetForwarderIterator, error) {

	logs, sub, err := _DexSpan.contract.FilterLogs(opts, "SetAssetForwarder")
	if err != nil {
		return nil, err
	}
	return &DexSpanSetAssetForwarderIterator{contract: _DexSpan.contract, event: "SetAssetForwarder", logs: logs, sub: sub}, nil
}

// WatchSetAssetForwarder is a free log subscription operation binding the contract event 0x61b6fe2922f0180b98d305419bf3dcf432f5d8df894388c61c1f599c2194ec1d.
//
// Solidity: event SetAssetForwarder(address assetForwarder, address admin)
func (_DexSpan *DexSpanFilterer) WatchSetAssetForwarder(opts *bind.WatchOpts, sink chan<- *DexSpanSetAssetForwarder) (event.Subscription, error) {

	logs, sub, err := _DexSpan.contract.WatchLogs(opts, "SetAssetForwarder")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DexSpanSetAssetForwarder)
				if err := _DexSpan.contract.UnpackLog(event, "SetAssetForwarder", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetAssetForwarder is a log parse operation binding the contract event 0x61b6fe2922f0180b98d305419bf3dcf432f5d8df894388c61c1f599c2194ec1d.
//
// Solidity: event SetAssetForwarder(address assetForwarder, address admin)
func (_DexSpan *DexSpanFilterer) ParseSetAssetForwarder(log types.Log) (*DexSpanSetAssetForwarder, error) {
	event := new(DexSpanSetAssetForwarder)
	if err := _DexSpan.contract.UnpackLog(event, "SetAssetForwarder", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DexSpanSetFactorySetterIterator is returned from FilterSetFactorySetter and is used to iterate over the raw logs and unpacked data for SetFactorySetter events raised by the DexSpan contract.
type DexSpanSetFactorySetterIterator struct {
	Event *DexSpanSetFactorySetter // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DexSpanSetFactorySetterIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DexSpanSetFactorySetter)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DexSpanSetFactorySetter)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DexSpanSetFactorySetterIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DexSpanSetFactorySetterIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DexSpanSetFactorySetter represents a SetFactorySetter event raised by the DexSpan contract.
type DexSpanSetFactorySetter struct {
	FactorySetter common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterSetFactorySetter is a free log retrieval operation binding the contract event 0xd2b69bde5a989d23ef605a0dd4e0edf7662105058ab69f2559e482857b599ed8.
//
// Solidity: event SetFactorySetter(address factorySetter)
func (_DexSpan *DexSpanFilterer) FilterSetFactorySetter(opts *bind.FilterOpts) (*DexSpanSetFactorySetterIterator, error) {

	logs, sub, err := _DexSpan.contract.FilterLogs(opts, "SetFactorySetter")
	if err != nil {
		return nil, err
	}
	return &DexSpanSetFactorySetterIterator{contract: _DexSpan.contract, event: "SetFactorySetter", logs: logs, sub: sub}, nil
}

// WatchSetFactorySetter is a free log subscription operation binding the contract event 0xd2b69bde5a989d23ef605a0dd4e0edf7662105058ab69f2559e482857b599ed8.
//
// Solidity: event SetFactorySetter(address factorySetter)
func (_DexSpan *DexSpanFilterer) WatchSetFactorySetter(opts *bind.WatchOpts, sink chan<- *DexSpanSetFactorySetter) (event.Subscription, error) {

	logs, sub, err := _DexSpan.contract.WatchLogs(opts, "SetFactorySetter")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DexSpanSetFactorySetter)
				if err := _DexSpan.contract.UnpackLog(event, "SetFactorySetter", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetFactorySetter is a log parse operation binding the contract event 0xd2b69bde5a989d23ef605a0dd4e0edf7662105058ab69f2559e482857b599ed8.
//
// Solidity: event SetFactorySetter(address factorySetter)
func (_DexSpan *DexSpanFilterer) ParseSetFactorySetter(log types.Log) (*DexSpanSetFactorySetter, error) {
	event := new(DexSpanSetFactorySetter)
	if err := _DexSpan.contract.UnpackLog(event, "SetFactorySetter", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DexSpanSetFlagToFactoryIterator is returned from FilterSetFlagToFactory and is used to iterate over the raw logs and unpacked data for SetFlagToFactory events raised by the DexSpan contract.
type DexSpanSetFlagToFactoryIterator struct {
	Event *DexSpanSetFlagToFactory // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DexSpanSetFlagToFactoryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DexSpanSetFlagToFactory)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DexSpanSetFlagToFactory)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DexSpanSetFlagToFactoryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DexSpanSetFlagToFactoryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DexSpanSetFlagToFactory represents a SetFlagToFactory event raised by the DexSpan contract.
type DexSpanSetFlagToFactory struct {
	Flag           *big.Int
	FactoryAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterSetFlagToFactory is a free log retrieval operation binding the contract event 0x11f5b5361c420666dc3452b8107601e1702f94b951f15bd93c26262c8147874e.
//
// Solidity: event SetFlagToFactory(uint256 flag, address factoryAddress)
func (_DexSpan *DexSpanFilterer) FilterSetFlagToFactory(opts *bind.FilterOpts) (*DexSpanSetFlagToFactoryIterator, error) {

	logs, sub, err := _DexSpan.contract.FilterLogs(opts, "SetFlagToFactory")
	if err != nil {
		return nil, err
	}
	return &DexSpanSetFlagToFactoryIterator{contract: _DexSpan.contract, event: "SetFlagToFactory", logs: logs, sub: sub}, nil
}

// WatchSetFlagToFactory is a free log subscription operation binding the contract event 0x11f5b5361c420666dc3452b8107601e1702f94b951f15bd93c26262c8147874e.
//
// Solidity: event SetFlagToFactory(uint256 flag, address factoryAddress)
func (_DexSpan *DexSpanFilterer) WatchSetFlagToFactory(opts *bind.WatchOpts, sink chan<- *DexSpanSetFlagToFactory) (event.Subscription, error) {

	logs, sub, err := _DexSpan.contract.WatchLogs(opts, "SetFlagToFactory")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DexSpanSetFlagToFactory)
				if err := _DexSpan.contract.UnpackLog(event, "SetFlagToFactory", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetFlagToFactory is a log parse operation binding the contract event 0x11f5b5361c420666dc3452b8107601e1702f94b951f15bd93c26262c8147874e.
//
// Solidity: event SetFlagToFactory(uint256 flag, address factoryAddress)
func (_DexSpan *DexSpanFilterer) ParseSetFlagToFactory(log types.Log) (*DexSpanSetFlagToFactory, error) {
	event := new(DexSpanSetFlagToFactory)
	if err := _DexSpan.contract.UnpackLog(event, "SetFlagToFactory", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DexSpanSetWNativeAddressesIterator is returned from FilterSetWNativeAddresses and is used to iterate over the raw logs and unpacked data for SetWNativeAddresses events raised by the DexSpan contract.
type DexSpanSetWNativeAddressesIterator struct {
	Event *DexSpanSetWNativeAddresses // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DexSpanSetWNativeAddressesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DexSpanSetWNativeAddresses)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DexSpanSetWNativeAddresses)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DexSpanSetWNativeAddressesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DexSpanSetWNativeAddressesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DexSpanSetWNativeAddresses represents a SetWNativeAddresses event raised by the DexSpan contract.
type DexSpanSetWNativeAddresses struct {
	WrappedNative common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterSetWNativeAddresses is a free log retrieval operation binding the contract event 0xcc4166d40cf68104cdf710f65ce022efd296742868a22b42e4695f89b8863636.
//
// Solidity: event SetWNativeAddresses(address wrappedNative)
func (_DexSpan *DexSpanFilterer) FilterSetWNativeAddresses(opts *bind.FilterOpts) (*DexSpanSetWNativeAddressesIterator, error) {

	logs, sub, err := _DexSpan.contract.FilterLogs(opts, "SetWNativeAddresses")
	if err != nil {
		return nil, err
	}
	return &DexSpanSetWNativeAddressesIterator{contract: _DexSpan.contract, event: "SetWNativeAddresses", logs: logs, sub: sub}, nil
}

// WatchSetWNativeAddresses is a free log subscription operation binding the contract event 0xcc4166d40cf68104cdf710f65ce022efd296742868a22b42e4695f89b8863636.
//
// Solidity: event SetWNativeAddresses(address wrappedNative)
func (_DexSpan *DexSpanFilterer) WatchSetWNativeAddresses(opts *bind.WatchOpts, sink chan<- *DexSpanSetWNativeAddresses) (event.Subscription, error) {

	logs, sub, err := _DexSpan.contract.WatchLogs(opts, "SetWNativeAddresses")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DexSpanSetWNativeAddresses)
				if err := _DexSpan.contract.UnpackLog(event, "SetWNativeAddresses", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetWNativeAddresses is a log parse operation binding the contract event 0xcc4166d40cf68104cdf710f65ce022efd296742868a22b42e4695f89b8863636.
//
// Solidity: event SetWNativeAddresses(address wrappedNative)
func (_DexSpan *DexSpanFilterer) ParseSetWNativeAddresses(log types.Log) (*DexSpanSetWNativeAddresses, error) {
	event := new(DexSpanSetWNativeAddresses)
	if err := _DexSpan.contract.UnpackLog(event, "SetWNativeAddresses", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DexSpanSwapIterator is returned from FilterSwap and is used to iterate over the raw logs and unpacked data for Swap events raised by the DexSpan contract.
type DexSpanSwapIterator struct {
	Event *DexSpanSwap // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DexSpanSwapIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DexSpanSwap)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DexSpanSwap)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DexSpanSwapIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DexSpanSwapIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DexSpanSwap represents a Swap event raised by the DexSpan contract.
type DexSpanSwap struct {
	FuncName  common.Hash
	TokenPath []common.Address
	Amount    *big.Int
	Sender    common.Address
	Receiver  common.Address
	FinalAmt  *big.Int
	Flags     []*big.Int
	WidgetID  *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterSwap is a free log retrieval operation binding the contract event 0xe3716b48e7d01d727d68472c873c69c2c4407365e4f68b2b6c8dd4569cd16dc7.
//
// Solidity: event Swap(string indexed funcName, address[] tokenPath, uint256 amount, address indexed sender, address indexed receiver, uint256 finalAmt, uint256[] flags, uint256 widgetID)
func (_DexSpan *DexSpanFilterer) FilterSwap(opts *bind.FilterOpts, funcName []string, sender []common.Address, receiver []common.Address) (*DexSpanSwapIterator, error) {

	var funcNameRule []interface{}
	for _, funcNameItem := range funcName {
		funcNameRule = append(funcNameRule, funcNameItem)
	}

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}

	logs, sub, err := _DexSpan.contract.FilterLogs(opts, "Swap", funcNameRule, senderRule, receiverRule)
	if err != nil {
		return nil, err
	}
	return &DexSpanSwapIterator{contract: _DexSpan.contract, event: "Swap", logs: logs, sub: sub}, nil
}

// WatchSwap is a free log subscription operation binding the contract event 0xe3716b48e7d01d727d68472c873c69c2c4407365e4f68b2b6c8dd4569cd16dc7.
//
// Solidity: event Swap(string indexed funcName, address[] tokenPath, uint256 amount, address indexed sender, address indexed receiver, uint256 finalAmt, uint256[] flags, uint256 widgetID)
func (_DexSpan *DexSpanFilterer) WatchSwap(opts *bind.WatchOpts, sink chan<- *DexSpanSwap, funcName []string, sender []common.Address, receiver []common.Address) (event.Subscription, error) {

	var funcNameRule []interface{}
	for _, funcNameItem := range funcName {
		funcNameRule = append(funcNameRule, funcNameItem)
	}

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}

	logs, sub, err := _DexSpan.contract.WatchLogs(opts, "Swap", funcNameRule, senderRule, receiverRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DexSpanSwap)
				if err := _DexSpan.contract.UnpackLog(event, "Swap", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSwap is a log parse operation binding the contract event 0xe3716b48e7d01d727d68472c873c69c2c4407365e4f68b2b6c8dd4569cd16dc7.
//
// Solidity: event Swap(string indexed funcName, address[] tokenPath, uint256 amount, address indexed sender, address indexed receiver, uint256 finalAmt, uint256[] flags, uint256 widgetID)
func (_DexSpan *DexSpanFilterer) ParseSwap(log types.Log) (*DexSpanSwap, error) {
	event := new(DexSpanSwap)
	if err := _DexSpan.contract.UnpackLog(event, "Swap", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DexSpanSwapOnSameChainIterator is returned from FilterSwapOnSameChain and is used to iterate over the raw logs and unpacked data for SwapOnSameChain events raised by the DexSpan contract.
type DexSpanSwapOnSameChainIterator struct {
	Event *DexSpanSwapOnSameChain // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DexSpanSwapOnSameChainIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DexSpanSwapOnSameChain)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DexSpanSwapOnSameChain)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DexSpanSwapOnSameChainIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DexSpanSwapOnSameChainIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DexSpanSwapOnSameChain represents a SwapOnSameChain event raised by the DexSpan contract.
type DexSpanSwapOnSameChain struct {
	FromToken common.Address
	DestToken common.Address
	Amount    *big.Int
	Data      []byte
	Flags     *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterSwapOnSameChain is a free log retrieval operation binding the contract event 0x20b442d5b28c685cfae89f7057f0c50b905e704494b6f1604e7f4a0c3a4cd5d0.
//
// Solidity: event SwapOnSameChain(address fromToken, address destToken, uint256 amount, bytes _data, uint256 flags)
func (_DexSpan *DexSpanFilterer) FilterSwapOnSameChain(opts *bind.FilterOpts) (*DexSpanSwapOnSameChainIterator, error) {

	logs, sub, err := _DexSpan.contract.FilterLogs(opts, "SwapOnSameChain")
	if err != nil {
		return nil, err
	}
	return &DexSpanSwapOnSameChainIterator{contract: _DexSpan.contract, event: "SwapOnSameChain", logs: logs, sub: sub}, nil
}

// WatchSwapOnSameChain is a free log subscription operation binding the contract event 0x20b442d5b28c685cfae89f7057f0c50b905e704494b6f1604e7f4a0c3a4cd5d0.
//
// Solidity: event SwapOnSameChain(address fromToken, address destToken, uint256 amount, bytes _data, uint256 flags)
func (_DexSpan *DexSpanFilterer) WatchSwapOnSameChain(opts *bind.WatchOpts, sink chan<- *DexSpanSwapOnSameChain) (event.Subscription, error) {

	logs, sub, err := _DexSpan.contract.WatchLogs(opts, "SwapOnSameChain")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DexSpanSwapOnSameChain)
				if err := _DexSpan.contract.UnpackLog(event, "SwapOnSameChain", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSwapOnSameChain is a log parse operation binding the contract event 0x20b442d5b28c685cfae89f7057f0c50b905e704494b6f1604e7f4a0c3a4cd5d0.
//
// Solidity: event SwapOnSameChain(address fromToken, address destToken, uint256 amount, bytes _data, uint256 flags)
func (_DexSpan *DexSpanFilterer) ParseSwapOnSameChain(log types.Log) (*DexSpanSwapOnSameChain, error) {
	event := new(DexSpanSwapOnSameChain)
	if err := _DexSpan.contract.UnpackLog(event, "SwapOnSameChain", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DexSpanSwapWithRecipientIterator is returned from FilterSwapWithRecipient and is used to iterate over the raw logs and unpacked data for SwapWithRecipient events raised by the DexSpan contract.
type DexSpanSwapWithRecipientIterator struct {
	Event *DexSpanSwapWithRecipient // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DexSpanSwapWithRecipientIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DexSpanSwapWithRecipient)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DexSpanSwapWithRecipient)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DexSpanSwapWithRecipientIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DexSpanSwapWithRecipientIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DexSpanSwapWithRecipient represents a SwapWithRecipient event raised by the DexSpan contract.
type DexSpanSwapWithRecipient struct {
	FuncName  common.Hash
	TokenPath []common.Address
	Amount    *big.Int
	Sender    common.Address
	Receiver  common.Address
	FinalAmt  *big.Int
	Flags     []*big.Int
	WidgetID  *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterSwapWithRecipient is a free log retrieval operation binding the contract event 0xc40fae9d5f584875c393ac222c6f88b6c9dced1e9cc6251483648ac2e902c8b0.
//
// Solidity: event SwapWithRecipient(string indexed funcName, address[] tokenPath, uint256 amount, address indexed sender, address indexed receiver, uint256 finalAmt, uint256[] flags, uint256 widgetID)
func (_DexSpan *DexSpanFilterer) FilterSwapWithRecipient(opts *bind.FilterOpts, funcName []string, sender []common.Address, receiver []common.Address) (*DexSpanSwapWithRecipientIterator, error) {

	var funcNameRule []interface{}
	for _, funcNameItem := range funcName {
		funcNameRule = append(funcNameRule, funcNameItem)
	}

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}

	logs, sub, err := _DexSpan.contract.FilterLogs(opts, "SwapWithRecipient", funcNameRule, senderRule, receiverRule)
	if err != nil {
		return nil, err
	}
	return &DexSpanSwapWithRecipientIterator{contract: _DexSpan.contract, event: "SwapWithRecipient", logs: logs, sub: sub}, nil
}

// WatchSwapWithRecipient is a free log subscription operation binding the contract event 0xc40fae9d5f584875c393ac222c6f88b6c9dced1e9cc6251483648ac2e902c8b0.
//
// Solidity: event SwapWithRecipient(string indexed funcName, address[] tokenPath, uint256 amount, address indexed sender, address indexed receiver, uint256 finalAmt, uint256[] flags, uint256 widgetID)
func (_DexSpan *DexSpanFilterer) WatchSwapWithRecipient(opts *bind.WatchOpts, sink chan<- *DexSpanSwapWithRecipient, funcName []string, sender []common.Address, receiver []common.Address) (event.Subscription, error) {

	var funcNameRule []interface{}
	for _, funcNameItem := range funcName {
		funcNameRule = append(funcNameRule, funcNameItem)
	}

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}

	logs, sub, err := _DexSpan.contract.WatchLogs(opts, "SwapWithRecipient", funcNameRule, senderRule, receiverRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DexSpanSwapWithRecipient)
				if err := _DexSpan.contract.UnpackLog(event, "SwapWithRecipient", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSwapWithRecipient is a log parse operation binding the contract event 0xc40fae9d5f584875c393ac222c6f88b6c9dced1e9cc6251483648ac2e902c8b0.
//
// Solidity: event SwapWithRecipient(string indexed funcName, address[] tokenPath, uint256 amount, address indexed sender, address indexed receiver, uint256 finalAmt, uint256[] flags, uint256 widgetID)
func (_DexSpan *DexSpanFilterer) ParseSwapWithRecipient(log types.Log) (*DexSpanSwapWithRecipient, error) {
	event := new(DexSpanSwapWithRecipient)
	if err := _DexSpan.contract.UnpackLog(event, "SwapWithRecipient", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DexSpanTransferOwnershipIterator is returned from FilterTransferOwnership and is used to iterate over the raw logs and unpacked data for TransferOwnership events raised by the DexSpan contract.
type DexSpanTransferOwnershipIterator struct {
	Event *DexSpanTransferOwnership // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DexSpanTransferOwnershipIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DexSpanTransferOwnership)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DexSpanTransferOwnership)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DexSpanTransferOwnershipIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DexSpanTransferOwnershipIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DexSpanTransferOwnership represents a TransferOwnership event raised by the DexSpan contract.
type DexSpanTransferOwnership struct {
	NewOwner common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferOwnership is a free log retrieval operation binding the contract event 0xcfaaa26691e16e66e73290fc725eee1a6b4e0e693a1640484937aac25ffb55a4.
//
// Solidity: event TransferOwnership(address newOwner)
func (_DexSpan *DexSpanFilterer) FilterTransferOwnership(opts *bind.FilterOpts) (*DexSpanTransferOwnershipIterator, error) {

	logs, sub, err := _DexSpan.contract.FilterLogs(opts, "TransferOwnership")
	if err != nil {
		return nil, err
	}
	return &DexSpanTransferOwnershipIterator{contract: _DexSpan.contract, event: "TransferOwnership", logs: logs, sub: sub}, nil
}

// WatchTransferOwnership is a free log subscription operation binding the contract event 0xcfaaa26691e16e66e73290fc725eee1a6b4e0e693a1640484937aac25ffb55a4.
//
// Solidity: event TransferOwnership(address newOwner)
func (_DexSpan *DexSpanFilterer) WatchTransferOwnership(opts *bind.WatchOpts, sink chan<- *DexSpanTransferOwnership) (event.Subscription, error) {

	logs, sub, err := _DexSpan.contract.WatchLogs(opts, "TransferOwnership")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DexSpanTransferOwnership)
				if err := _DexSpan.contract.UnpackLog(event, "TransferOwnership", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferOwnership is a log parse operation binding the contract event 0xcfaaa26691e16e66e73290fc725eee1a6b4e0e693a1640484937aac25ffb55a4.
//
// Solidity: event TransferOwnership(address newOwner)
func (_DexSpan *DexSpanFilterer) ParseTransferOwnership(log types.Log) (*DexSpanTransferOwnership, error) {
	event := new(DexSpanTransferOwnership)
	if err := _DexSpan.contract.UnpackLog(event, "TransferOwnership", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
